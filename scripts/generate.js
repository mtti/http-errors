const fs = require('fs');
const path = require('path');
const { StatusCodes, getReasonPhrase } = require('http-status-codes');
const { pascalCase } = require('pascal-case');
const nunjucks = require('nunjucks');

const template = `// This file is automatically generated

import { HttpError } from '../HttpError';

/** HTTP {{ code }} {{ reasonPhrase }} error */
export class {{ pascalCase }}Error extends HttpError {
  constructor(message?: string) {
    super({{ code }}, message);
  }
}
`;

const indexTemplate = `// This file is automatically generated

{% for file in files -%}
export * from './{{ file.pascalCase }}Error';
{% endfor -%}
`;

const dstDir = path.resolve(__dirname, '..', 'src', 'generated');

const files = Object
  .keys(StatusCodes)
  .map((code) => parseInt(code, 10))
  .filter((code) => !!code)
  .filter((code) => code >= 400 && code < 600)
  .map((code) => ({
    code,
    reasonPhrase: getReasonPhrase(code),
    pascalCase: pascalCase(getReasonPhrase(code)),
  }))
  .map((ctx) => ({
    name: `${ctx.pascalCase}Error.ts`,
    content: nunjucks.renderString(template, ctx),
    pascalCase: ctx.pascalCase,
  }));

files.forEach(({name, content}) => {
    const dstPath = path.join(dstDir, name);
    console.log(`Writing ${dstPath}`);

    fs.writeFileSync(
      dstPath,
      content
    );
  });

fs.writeFileSync(
  path.join(dstDir, 'index.ts'),
  nunjucks.renderString(indexTemplate, { files })
);
